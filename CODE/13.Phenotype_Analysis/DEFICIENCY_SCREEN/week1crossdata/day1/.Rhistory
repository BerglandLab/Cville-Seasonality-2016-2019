monitorvector = readRDS("monitor.vector")
flyids = readRDS("trik.flyids")
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/")
setwd( wd )
library(data.table)
library(tidyverse)
library(gtools)
library(foreach)
library(doParallel)
library(corrplot)
library(patchwork)
library(ggrepel)
#install.packages('doParallel', repos='http://cran.us.r-project.org')
#use doParallel package to register multiple cores that can be used to run loops in parallel
registerDoParallel(10)
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/")
setwd( wd )
monitorvector = readRDS("monitor.vector")
flyids = readRDS("trik.flyids")
fly.shuffled = sample(flyids, 384)
well.guide = data.table(
wells = monitorvector,
flyids = fly.shuffled
)
head(well.guide)
write.csv(well.guide, file = "well.guide1.csv")
monitorvector = readRDS("monitor.vector")
flyids = readRDS("trik.flyids")
set.seed(2)
fly.shuffled = sample(flyids, 384)
well.guide = data.table(
wells = monitorvector,
flyids = fly.shuffled
)
head(well.guide)
write.csv(well.guide, file = "well.guide2.csv")
monitorvector = readRDS("monitor.vector")
flyids = readRDS("trik.flyids")
set.seed(3)
fly.shuffled = sample(flyids, 384)
well.guide = data.table(
wells = monitorvector,
flyids = fly.shuffled
)
write.csv(well.guide, file = "well.guide3.csv")
monitorvector = readRDS("monitor.vector")
flyids = readRDS("trik.flyids")
set.seed(4)
fly.shuffled = sample(flyids, 384)
well.guide = data.table(
wells = monitorvector,
flyids = fly.shuffled
)
write.csv(well.guide, file = "well.guide4.csv")
library(data.table)
library(tidyverse)
library(gtools)
library(foreach)
library(doParallel)
library(corrplot)
library(patchwork)
library(ggrepel)
#install.packages('doParallel', repos='http://cran.us.r-project.org')
#use doParallel package to register multiple cores that can be used to run loops in parallel
registerDoParallel(10)
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/")
setwd( wd )
# in this instance, we only have data from monitors 4 and 85
M1data <- fread("./Monitor1.txt") #every well is full
M2data = fread("./Monitor2.txt")# only top 11 are full
View(M2data)
# in this instance, we only have data from monitors 4 and 85
M4data <- fread("./Monitor4.txt") #every well is full
M85data = fread("./Monitor85.txt")# only top 11 are full
removem85 = paste0("V", ( 10 + c(11:32)))
M85data = M85data %>%
select(!all_of(removem85))
#append important tag info (sex, monitor number#)
M4data$monitor = 4
M85data$monitor = 85
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/week1crossdata/")
setwd( wd )
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/week1crossdata/day1/")
setwd( wd )
##########################################
###filtering out empty wells/dead flies###
##########################################
#goal- create a code that finds and removes empty wells, or wells in which flies are dead/innert.
#attempt 1- do empty wells ever report activity?
m85.empty =
removem85 = paste0("V", ( 10 + c(11:32)))
##########################################
###filtering out empty wells/dead flies###
##########################################
#goal- create a code that finds and removes empty wells, or wells in which flies are dead/innert.
#attempt 1- do empty wells ever report activity?
removem85 = paste0("V", ( 10 + c(11:32)))
m85.empty = M85data  %>%
select(all_of(removem85))
M85data = fread("./Monitor85.txt")# only top 11 are full
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/")
setwd( wd )
# in this instance, we only have data from monitors 4 and 85
M4data <- fread("./Monitor4.txt") #every well is full
M85data = fread("./Monitor85.txt")# only top 11 are full
##########################################
###filtering out empty wells/dead flies###
##########################################
#goal- create a code that finds and removes empty wells, or wells in which flies are dead/innert.
#attempt 1- do empty wells ever report activity?
removem85 = paste0("V", ( 10 + c(11:32)))
m85.empty = M85data  %>%
select(all_of(removem85))
View(m85.empty)
#find sum of each of these emtpy well
well.sums = colSums(m85.empty)
well.sums
View(M85data)
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/week1crossdata/day1/")
setwd( wd )
# in this instance, we only have data from monitors 4 and 85
M1data <- fread("./Monitor1.txt") #every well is full
M2data = fread("./Monitor2.txt")# only top 5 are full
View(M2data)
##########################################
###filtering out empty wells/dead flies###
##########################################
#goal- create a code that finds and removes empty wells, or wells in which flies are dead/innert.
#attempt 1- do empty wells ever report activity?
removem2 = paste0("V", ( 10 + c(6:32)))
m2.empty = M2data  %>%
select(all_of(removem2))
#find sum of each of these emtpy well
well.sums = colSums(m2.empty)
well.sums
#append important tag info (sex, monitor number#)
M1data$monitor = 1
M2data$monitor = 2
listdata = list(M1data, M2data)
#use a foreach loop to perform the same data fixing to each data table
# I found the issue! the presence of multiple days is throwing off the cmin column
out = foreach(f = c(1:2)) %do% {
#f = 1
dt = listdata[[f]]
#split time
dt[,c("hour","minute","second"):= tstrsplit(V3, ":")]
dt[,c("day", "month", "year"):= tstrsplit(V2, "\\ ")]
# #filter out second day
# dt = dt[day == 18]
#remove first 10 columns
filtered = dt[,-c(1:10)]
filtered$cmin = (as.numeric(filtered$day) * 1440 + as.numeric(filtered$hour) * 60) + as.numeric(filtered$minute) + as.numeric(filtered$second)/60
#subtract start time to find cumulative minutes passed
filtered$cmin = filtered$cmin - min(filtered$cmin)
#need to remove the row with each of our startle events
filtered = filtered[cmin != 1196.8500] #remove row with first event
filtered = filtered[cmin != 2537.533] #remove row with second event
#remove unnecessary time variables
smaller = filtered %>%
select(!c(hour, minute, second, day, month, year))
#now melt data with sex, monitor, and cmin as id variables, all other columns as variables
meltdata = melt(smaller, id.vars = c("cmin", "monitor"), variable.name = "fly.id", value.name = "activity")
meltdata
# I want to see what individual flies look like, and if I can filter out the empty slots\
#ggplot(data = meltdata, aes(x = fly.id, y = activity)) + geom_violin()
#there's a very clear difference between empty and filled slots- empty rarely if ever go above 0
}
bind.data = rbindlist(out)
head(bind.data)
#now melt data with sex, monitor, and cmin as id variables, all other columns as variables
meltdata = melt(smaller, id.vars = c("cmin", "monitor"), variable.name = "well.number", value.name = "activity")
#next step is to bring in the fly genotype information, and merge taht in based on wells. have to change well info to match what is in our excel files
meltdata$wells = paste0("M.", meltdata$monitor, ".", meltdata$well.number)
head(meltdata)
meltdata$wells = gsub("V", "", meltdata$wells)
head(meltdata)
#use a foreach loop to perform the same data fixing to each data table
# I found the issue! the presence of multiple days is throwing off the cmin column
out = foreach(f = c(1:2)) %do% {
#f = 1
dt = listdata[[f]]
#split time
dt[,c("hour","minute","second"):= tstrsplit(V3, ":")]
dt[,c("day", "month", "year"):= tstrsplit(V2, "\\ ")]
# #filter out second day
# dt = dt[day == 18]
#remove first 10 columns
filtered = dt[,-c(1:10)]
filtered$cmin = (as.numeric(filtered$day) * 1440 + as.numeric(filtered$hour) * 60) + as.numeric(filtered$minute) + as.numeric(filtered$second)/60
#subtract start time to find cumulative minutes passed
filtered$cmin = filtered$cmin - min(filtered$cmin)
#need to remove the row with each of our startle events
filtered = filtered[cmin != 1196.8500] #remove row with first event
filtered = filtered[cmin != 2537.533] #remove row with second event
#remove unnecessary time variables
smaller = filtered %>%
select(!c(hour, minute, second, day, month, year))
#now melt data with sex, monitor, and cmin as id variables, all other columns as variables
meltdata = melt(smaller, id.vars = c("cmin", "monitor"), variable.name = "well.number", value.name = "activity")
#next step is to bring in the fly genotype information, and merge taht in based on wells. have to change well info to match what is in our excel files
meltdata$wells = paste0("M.", meltdata$monitor, ".", meltdata$well.number)
meltdata$wells = gsub("V", "", meltdata$wells)
}
