ylim(-1, 25)
phenotype.dt = days.out %>%
filter(observed.id == "random") %>%
group_by(flyid) %>%
summarise(random.mean = mean(activity.level)) %>%
as.data.table(.)
#merge these values back in
phenotype.dt = merge(days.out, phenotype.dt, by = "flyid")
#now find difference via substraction, then find mean per cross
phenotype.dt = phenotype.dt %>%
filter(observed.id == "observed") %>%
mutate(scaled.act = activity.level - random.mean) %>%
select(fly.geno, scaled.act, interval, day, flyid) %>%
as.data.table(.)
phenotype.dt$geno.inter = substr(phenotype.dt$fly.geno, 1, 9)
#seperate out variables like defienciy/balancer and inverted/standard
phenotype.dt[,c("cross", "f1.geno"):= tstrsplit(phenotype.dt$geno.inter, "\\.")]
phenotype.dt[,c("knockout", "DGRP"):= tstrsplit(phenotype.dt$cross, "-")]
phenotype.dt$inversion.st = ifelse(grepl("i", phenotype.dt$DGRP),"inverted", "standard")
#graph startle differences
ggplot(data = phenotype.dt, aes(x = inversion.st, y = scaled.act, color = f1.geno)) + geom_boxplot(outlier.shape =NA) +
facet_grid(~knockout)
#graph startle differences
ggplot(data = phenotype.dt, aes(x = inversion.st, y = scaled.act, color = f1.geno)) + geom_boxplot(outlier.shape =NA) +
facet_grid(~knockout)+
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k2b"]
ggplot(data = cross.spec, aes(x = inversion.st, y = scaled.act, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k5b"]
ggplot(data = cross.spec, aes(x = inversion.st, y = scaled.act, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
cross.spec = phenotype.dt[DGRP== "di1"]
ggplot(data = cross.spec, aes(x = inversion.st, y = scaled.act, color = f1.geno)) + geom_boxplot() +
facet_grid(~knockout)
#analyze deficiency lines, see which are within inversion, adjacent to breakpoints, or further out.
#load in data
setwd("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Jan_2022_objects/")
library(data.table)
library(tidyverse)
metadata = fread("deficiencydataJan.csv")
#need to create a column for start and stop that deals with unclear start/stop
#will remove deficiencies with no nucleotide-level resolution, then show median from ranges
#deficiency to remove: 1491,32256, 24626
metadata.remove = metadata[Deficiency != 1491]
metadata.remove = metadata.remove[Deficiency != 32256]
metadata.remove = metadata.remove[Deficiency != 24626]
#create a function that keeps number if endpoint is set, or creates midpoint if interval
midpointfind = function(endpoint) {
if (grepl("-",endpoint)) {
split =  as.numeric(unlist(strsplit(endpoint, "-")))
midpoint = (split[1] +  split[2])/2
}else {
midpoint = as.numeric(endpoint)
}
return(midpoint)
}
midpointfind("34-33")
#ensure data starts as character type
metadata.remove$Start.Position = as.character(metadata.remove$Start.Position)
metadata.remove$Stop.Position = as.character(metadata.remove$Stop.Position)
#create vectors for start and stop to apply function to using lapply
startpoints = metadata.remove$Start.Position
midstarts = lapply(startpoints, midpointfind)
midstarts = unlist(midstarts)
metadata.remove$start.mid = midstarts
stoppoints = metadata.remove$Stop.Position
midstops = lapply(stoppoints, midpointfind)
midstops = unlist(midstops)
metadata.remove$stop.mid = midstops
#add a column for "order" of deletion, from location on the chromosome
orderdata = metadata.remove %>%
arrange(start.mid)
#remove columns we don't want right now
orderdata = orderdata[, c(1,2,3,7,8)]
#create column of deletion order
orderdata$del.order = c(1:96)
#create variable marking deficiency lines of interest
interest = c(11, 12, 28:30,33,34,38,42,52,53,70)
orderdata$of.interest = "No"
orderdata$of.interest = ifelse(orderdata$del.order %in% interest, "yes", "no")
##show peaks
outlier_haplowins =
data.frame(win.name = c("inv.start", "win_4.6", "win_5.1", "win_6.2", "win_6.8", "win_9.5" , "inv.stop"),
start = c(2125744, 4656622, 5105919, 6155931, 6805798, 9505855, 13054180 ),
end = c( 2325744, 4805715, 5255685, 6355509, 6905746, 9605419, 13254180))
d = ggplot(data = orderdata) + geom_segment( aes(x = start.mid, y = del.order,
xend = stop.mid, yend = del.order, color = of.interest))+
scale_color_manual(values = c("black", "red"))
#illustrate region of inversion with shading
e = d +
geom_rect(aes(xmin = 2125744, xmax=2325744, ymin = 0, ymax = 100), alpha = 0.1, fill = "lightskyblue1") +
geom_rect(aes(xmin = 4656622, xmax=4805715, ymin = 0, ymax = 100), alpha = 0.1, fill = "lightskyblue1") +
geom_rect(aes(xmin = 5105919, xmax=5255685, ymin = 0, ymax = 100), alpha = 0.1, fill = "lightskyblue1") +
geom_rect(aes(xmin = 6155931, xmax=6355509, ymin = 0, ymax = 100), alpha = 0.1, fill = "lightskyblue1") +
geom_rect(aes(xmin = 6805798, xmax=6905746, ymin = 0, ymax = 100), alpha = 0.1, fill = "lightskyblue1") +
geom_rect(aes(xmin = 9505855, xmax=9605419, ymin = 0, ymax = 100), alpha = 0.1, fill = "lightskyblue1") +
geom_rect(aes(xmin = 13054180, xmax=13254180, ymin = 0, ymax = 100), alpha = 0.1, fill = "lightskyblue1")
e + xlab("2L chromosome position") +
ylab("order of delection from start to end")
head(orderdata)
View(orderdata)
library(gridExtra)
grid.table(orderdata[of.interest == "yes"])
grid.table(orderdata[of.interest == "yes"])
######################3
###dayly analysis###
#####################
#this is the part that eventually I want to loop over
out.days = foreach(f = c(1:4)) %do% {
#f   = 1
ref.values = ref.list[[f]]
wd =  paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/week1crossdata/", ref.values[[3]]  )
setwd( wd )
#now use monitor list to read in files
monitor.vector = ref.values[[1]]
#use a foreach loop to load in data perform the same data fixing to each data table
# I found the issue! the presence of multiple days is throwing off the cmin column
out = foreach(h = c(1:12)) %do% {
#g = 2
Mdata <- fread(paste0("./Monitor", monitor.vector[h], ".txt")) #every well is full
Mdata$monitor = h
#split time
Mdata[,c("hour","minute","second"):= tstrsplit(V3, ":")]
Mdata[,c("day", "month", "year"):= tstrsplit(V2, "\\ ")]
#remove first 10 columns
filtered = Mdata[,-c(1:10)]
filtered$cmin = (as.numeric(filtered$day) * 1440 + as.numeric(filtered$hour) * 60) + as.numeric(filtered$minute) + as.numeric(filtered$second)/60
#subtract start time to find cumulative minutes passed
filtered$cmin = filtered$cmin - min(filtered$cmin)
#look and see if any flies die
x = colSums(filtered[,1:32]) > 0
no.empty = filtered[,..x]
#remove unnecessary time variables
smaller = filtered %>%
select(!c(hour, minute, second, day, month, year))
#now melt data with sex, monitor, and cmin as id variables, all other columns as variables
meltdata = melt(smaller, id.vars = c("cmin", "monitor"), variable.name = "well.number", value.name = "activity")
meltdata
}
bind.data = rbindlist(out)
#remove empty wells from the data, as well as wells with dead flies. we are saying any well with no activity is empty/unused
sumdata = bind.data %>%
group_by(monitor, well.number) %>%
mutate(well.sum = sum(activity)) %>%
filter(well.sum > 0)
#next step is to bring in the fly genotype information, and merge taht in based on wells. have to change well info to match what is in our excel files
#oh my gosh- one last issue, the top 6 monitors are refered to as 7-12 (in the same order)
sumdata$well.number = gsub("V", "", sumdata$well.number) #remove V, then subtract 10
sumdata$well.number = as.numeric(sumdata$well.number) - 10
sumdata$wells = paste0("M.", sumdata$monitor, ".", sumdata$well.number)
#for day 1, we just have a short list, and will hand code. NEED TO ADD 10 TO MATCH TRIKINETIC NOTATION
flygeno.key = fread(paste0("/Users/supad/OneDrive/Documents/Bergland Research/R_data_objects/Aug_2022_objects/well.guide" , f, ".csv"), header = T)
flygeno.key = flygeno.key[,-1]#first column is uneeded
#merge in fly ids by well
mergedata = as.data.table( merge(sumdata, flygeno.key, by = "wells"))
colnames(mergedata)[7] = "fly.geno"
saveRDS(mergedata, paste0("cross1.day", f))
bind.data = as.data.table(readRDS(paste0("cross1.day", f)))
##############
###analysis###
##############
#cut out time for first 60 minutes as adjustment time
mergedata$cmin = as.numeric(mergedata$cmin)
cut.data = mergedata[cmin >60]
# cut.data$dataset = 0
#goal: we want to compare some amount of time immediately post startle to random time points chosen pre-startle
#let's try: 30 second,  1 minute, 5 minute increments
#count outer boundaries based on end of stimulus tiem period + interval, add up activity from all rows included in that.
#choose 100 other (pre-startle) time points at random to act as "startle didn't happen" follow the same procedure.
#use recorded time of stimulus to determine time of stimulus event- and remove any readings in this interval from the data set
stim.start = ref.values[[2]] %>% first
stim.end = ref.values[[2]] %>% last
cut.data = cut.data[cmin < stim.start | cmin > stim.end] #remove data inside the startle.
interval = c(.5,0.75, 1, 5,10) # vector of minute duration for our "startle response period"
j = interval[1] #choose interval- for now we'll stick with 1
#add interval to startle period end to  find end boundary of startle response period
boundary.start = stim.end
boundary.end = stim.end + j
#now select out rows within this range, and add up activity
selection1 = cut.data[cmin > boundary.start][cmin < boundary.end]
#find actual time span reflected in this boundary.
realboundary1 = max(selection1$cmin) - boundary.start
#sum up the activity for each fly, then divide by time summed over
selection1 = selection1 %>%
group_by(fly.geno) %>%
summarise(activity.level = sum(activity) / realboundary1) %>%
as.data.table(.)
###now we need to choose 100 time points (that are not within our interval of the startle period) and repeat)
day.1narrow = cut.data[cmin < (stim.start - j)]
#choose 100 timepoints
timepoints = sample(day.1narrow$cmin, 1000)
#create data table of boundaries
time.table = data.table(
startpoint = timepoints,
endpoint = (timepoints + j)
)
#run a second loop that finds the average fly activity /time for each of these random times
random.out = foreach(g = c(1:1000), .combine = "rbind", .packages = c("data.table", "tidyverse")) %dopar% {
# g = 1
boundary.random = time.table[g]
rand.selection = cut.data[cmin > boundary.random$startpoint][cmin < boundary.random$endpoint]
realboundary1 = max(rand.selection$cmin) - boundary.random$startpoint
rand.selection = rand.selection %>%
group_by(fly.geno) %>%
summarise(activity.level = sum(activity) / realboundary1) %>%
mutate(perm.number = g) %>%
as.data.table(.)
rand.selection
}
r.out = as.data.table(random.out)
colnames(r.out) = c("fly.geno","activity.level", "random.id")
#add perm = 0 column to observed, then rbind
selection1$random.id = 0
r.out = rbind(selection1, r.out)
r.out$interval = j
#give "observed/random" category
r.out$observed.id = ifelse(r.out$random.id == 0, "observed", "random")
r.out$day = f + 1 ###take this part out when we have all 5 days consistent
saveRDS(r.out, paste0("cross1day2.anz2", f))
r.out
} #end of daily loop
days.out = rbindlist(out.days)
table(days.out$day)
days.out[day == 3]
days.out[day == 2]
##optional code- skip the substaction
phenotype.dt = days.out
phenotype.dt$geno.inter = substr(phenotype.dt$fly.geno, 1, 9)
#seperate out variables like defienciy/balancer and inverted/standard
phenotype.dt[,c("cross", "f1.geno"):= tstrsplit(phenotype.dt$geno.inter, "\\.")]
phenotype.dt[,c("knockout", "DGRP"):= tstrsplit(phenotype.dt$cross, "-")]
phenotype.dt$inversion.st = ifelse(grepl("i", phenotype.dt$DGRP),"inverted", "standard")
head(phenotype.dt)
#graph startle differences
ggplot(data = phenotype.dt[observed.id == "observed"], aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot(outlier.shape =NA) +
facet_grid(~knockout)+
theme_bw()
days.out = rbindlist(out.days)
#initial analysis- record startle response phenotype as difference between activity level 1 minture prior startle, and 100 random 1 minute chunks prior to startle
#paste day and fly geno to create variable for each individual fly.
#how many empty wells failed to be removed
days.out[fly.geno == "empty"] #only 2 accross 5 days! nice
days.out = days.out[fly.geno != "empty"]
days.out$flyid = paste0(days.out$fly.geno, ".day", days.out$day)
##optional code- skip the substaction
phenotype.dt = days.out
phenotype.dt$geno.inter = substr(phenotype.dt$fly.geno, 1, 9)
#seperate out variables like defienciy/balancer and inverted/standard
phenotype.dt[,c("cross", "f1.geno"):= tstrsplit(phenotype.dt$geno.inter, "\\.")]
phenotype.dt[,c("knockout", "DGRP"):= tstrsplit(phenotype.dt$cross, "-")]
phenotype.dt$inversion.st = ifelse(grepl("i", phenotype.dt$DGRP),"inverted", "standard")
#graph startle differences
ggplot(data = phenotype.dt[observed.id == "observed"], aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot(outlier.shape =NA) +
facet_grid(~knockout)+
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k5b"]
ggplot(data = cross.spec, aes(x = inversion.st, y = scaled.act, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k5b"]
ggplot(data = cross.spec, aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k5b"]
ggplot(data = cross.spec, aes(x = inversion.st[observed.id == "observed"], y = activity.level, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
head(cross.spec)
ggplot(data = cross.spec[observed.id == "observed"], aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k2a"]
ggplot(data = cross.spec[observed.id == "observed"], aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
#graph startle differences
ggplot(data = phenotype.dt[observed.id == "observed"], aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot(outlier.shape =NA) +
facet_grid(~knockout)+
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k2a"]
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k5a"]
ggplot(data = cross.spec[observed.id == "observed"], aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
#try looking at the specific dgrp- knockout results
cross.spec = phenotype.dt[knockout == "k2b"]
ggplot(data = cross.spec[observed.id == "observed"], aes(x = inversion.st, y = activity.level, color = f1.geno)) + geom_boxplot() +
facet_grid(~DGRP) +
theme_bw()
#create variable for msp status
msp.status = data.frame (
DGRP = c(di1, di2,di3,di4,di5,di6,ds1,ds2,ds3,ds4),
msp.status = c(alt,alt,ref,alt,alt,alt, ref,ref,ref,ref)
)
#create variable for msp status
msp.status = data.frame (
DGRP = c('di1', 'di2','di3','di4','di5','di6','ds1','ds2','ds3','ds4'),
msp.status = c('alt','alt','ref','alt','alt','alt', 'ref','ref','ref','ref')
)
phenotype.dt = merge(phenotype.dt, msp.status, by = "DGRP")
ggplot(data = phenotype.dt[observed.id == "observed"], aes(x = msp.status, y = activity.level, color = f1.geno)) + geom_boxplot(outlier.shape =NA) +
facet_grid(~knockout)+
theme_bw()
phenotype.dt
library(gmodels)
install.packages("gmodels")
library(gmodels)
ci
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st )
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean
ymin=lci,
ymax=uci,
color = f1.geno
)) +
geom_errorbar() +
geom_point() +
facet_grid( knockout ~ inversion.st)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean,
ymin=lci,
ymax=uci,
color = f1.geno
)) +
geom_errorbar() +
geom_point() +
facet_grid( knockout ~ inversion.st)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean,
ymin=lci,
ymax=uci,
color = f1.geno
)) +
geom_errorbar(width = 0.1) +
geom_point() +
facet_grid( knockout ~ inversion.st)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean,
ymin=lci,
ymax=uci,
color = f1.geno,
shape = inversion.st
)) +
geom_errorbar(width = 0.1) +
geom_point() +
facet_grid( knockout ~ .)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean,
ymin=lci,
ymax=uci,
color = f1.geno,
shape = inversion.st
)) +
geom_errorbar(width = 0.1, position=position_dodge(width = 0.5)) +
geom_point(position=position_dodge(width = 0.5)) +
facet_grid( knockout ~ .)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean,
ymin=lci,
ymax=uci,
color = inversion.st
)) +
geom_errorbar(width = 0.1, position=position_dodge(width = 0.5)) +
geom_point(position=position_dodge(width = 0.5)) +
facet_grid( knockout ~ f1.geno)
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean,
ymin=lci,
ymax=uci,
color = inversion.st
)) +
geom_errorbar(width = 0.1, position=position_dodge(width = 0.5)) +
geom_point(position=position_dodge(width = 0.5)) +
facet_grid( knockout ~ f1.geno, scales = "free_y")
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout, inversion.st ) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=inversion.st,
y=mean,
ymin=lci,
ymax=uci,
color = f1.geno
)) +
geom_errorbar(width = 0.1, position=position_dodge(width = 0.5)) +
geom_point(position=position_dodge(width = 0.5)) +
facet_grid( knockout ~ msp.status, scales = "free_y")
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout,# inversion.st
) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=msp.status,
y=mean,
ymin=lci,
ymax=uci,
color = f1.geno
)) +
geom_errorbar(width = 0.1, position=position_dodge(width = 0.5)) +
geom_point(position=position_dodge(width = 0.5)) +
facet_grid( knockout ~ ., scales = "free_y")
phenotype.dt %>%
group_by(msp.status, f1.geno, knockout,# inversion.st
) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=f1.geno,
y=mean,
ymin=lci,
ymax=uci,
color =  msp.status
)) +
geom_errorbar(width = 0.1, position=position_dodge(width = 0.5)) +
geom_point(position=position_dodge(width = 0.5)) +
facet_grid( knockout ~ ., scales = "free_y")
phenotype.dt %>%
group_by(geno=paste(inversion.st,msp.status, sep = "_"), f1.geno, knockout,# inversion.st
) %>%
summarise(mean = ci(activity.level)[1],
uci = ci(activity.level)[2],
lci = ci(activity.level)[3]
) %>%
ggplot(aes(
x=f1.geno,
y=mean,
ymin=lci,
ymax=uci,
color =  geno
)) +
geom_errorbar(width = 0.1, position=position_dodge(width = 0.5)) +
geom_point(position=position_dodge(width = 0.5)) +
facet_grid( knockout ~ ., scales = "free_y")
